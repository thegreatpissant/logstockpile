input
{
	syslog
	{
		port => 5514 
		use_labels => false
		tags => PFSENSE
	}
}

# Example log messages for firewall rules
# IPV4 TCP
# "message" => "<134>Apr 29 13:15:31 filterlog: 
#85,16777216,,1427656417,re2,match,block,in,
#4,
#0x0,,50,33027,0,none,6,tcp,
#40,183.159.107.48,24.154.93.44,
#2126,22,0,
#S,412769580,,26027,,,
#
## IPV4 UDP
## "message" => "<134>Apr 29 13:15:40 filterlog: 
#130,16777216,,1427656430,em1,match,block,in,
#4,
#0x0,,255,9311,0,none,17,udp,
#92,10.0.1.40,224.0.0.251,
#5353,5353,72,
#
## IPV4 ICMP
## "message" => "<134>Apr 29 13:47:52 filterlog: 
#86,16777216,,1493488050,em1,match,block,in,
#4,
#0x0,,64,21950,0,DF,1,icmp,
#84,10.0.1.8,10.0.0.1,
#request,
#11269,1264,
#
## IPV6 UDP
## <134>Apr 29 13:21:53 filterlog: 
#5,16777216,,1000000003,em1,match,block,in,
#6,
#0x00,0xd541e,255,UDP,17,
#53,fe80::a00:27ff:fe2f:3f6d,ff02::fb,
#5353,5353,53"
#
# IPV6 TCP

# Referneces:
# PFSENSE Filter Log Format https://doc.pfsense.org/index.php/Filter_Log_Format_for_pfSense_2.2

filter
{
	if "PFSENSE" in [tags] { 
		if [message] =~ "filterlog"
		{
			csv {}
		}
		grok
		{
			break_on_match => false
			match =>
			{
				# syslog header and first field "Rule Number"
				# <134>Apr 29 13:15:31 filterlog: 85,
				"column1" => "<%{NUMBER:syslogfacility}>%{SYSLOGTIMESTAMP:logtime} filterlog: %{NUMBER:rule_number:int}"
			}
		}

		# Common Fields
		# 16777216,,1427656417,re2,match,block,in,
		mutate
		{
			remove_field => [ "column1" ]	# Cleanup the original field
			rename => { "column2" => "sub_rule_number" }
			rename => { "column3" => "anchor" }
			rename => { "column4" => "tracker" }
			rename => { "column5" => "interface" }
			rename => { "column6" => "reason" }
			rename => { "column7" => "action" }
			rename => { "column8" => "direction" }
			rename => { "column9" => "ip_version" }

			convert => { "sub_rule_number" => "integer" }
			convert => { "tracker" => "integer" }
			convert => { "ip_version" => "integer" }
		}

		# IPV4 Fields
		# #0x0,,50,33027,0,none,6,tcp,
		if [ip_version] == 4
		{
			mutate
			{
				rename => { "column10" => "tos" }
				rename => { "column11" => "ecn" }
				rename => { "column12" => "ttl" }
				rename => { "column13" => "id" }
				rename => { "column14" => "offset" }
				rename => { "column15" => "flags" }
				rename => { "column16" => "protocol_id" }
				rename => { "column17" => "protocol_txt" }

				convert => { "ttl" => "integer" }
				convert => { "id" => "integer" }
				convert => { "offset" => "integer" }
				convert => {"protocol_id" => "integer" }

				# IPV4 AND IPV6 common fields
				# 40,183.159.107.48,24.154.93.44,
				rename => { "column18" => "length" }
				rename => { "column19" => "source_ip" }
				rename => { "column20" => "destination_ip" }

				convert => { "length" => "integer" }
			}

			if [protocol_id] == 6
			{  # TCP
				mutate
				{
					rename => { "column21" => "source_port" }
					rename => { "column22" => "destination_port" }
					rename => { "column23" => "data_length" }
					rename => { "column24" => "tcp_flags" }
					rename => { "column25" => "sequence_number" }
					rename => { "column26" => "ack_number" }
					rename => { "column27" => "tcp_window" }
					rename => { "column28" => "urg" }
					rename => { "column29" => "options" }

					convert => { "source_port" => "integer" }
					convert => { "destination_port" => "integer" }
					convert => { "data_length" => "integer" }
					convert => { "sequence_number" => "integer" }
					convert => { "ack_number" => "integer" }
					convert => { "tcp_window" => "integer" }	      
				}
			}
			else if [protocol_id] == 17
			{  # UDP
				mutate
				{
					rename => { "column21" => "source_port" }
					rename => { "column22" => "destination_port" }
					rename => { "column23" => "data_length" }

					convert => { "source_port" => "integer" }
					convert => { "destination_port" => "integer" }
					convert => { "data_length" => "integer" }
				}
			}
			else if [protocol_id] == 1
			{  # ICMP
				mutate
				{
					rename => { "column21" => "icmp_type" }
				}
				if [icmp_type] == "request" or [icmp_type] == "reply"
				{
					mutate
					{
						rename => { "column22" => "icmp_request_id" }
						rename => { "column23" => "icmp_request_sequence" }
					}
				}
				else if [icmp_type] == "unreachport"
				{
					mutate
					{
						rename => { "column22" => "icmp_unreachport_destination_ip" }
						rename => { "column23" => "icmp_unreachport_protocol_id" }
						rename => { "column24" => "icmp_unreachport_port_number" }

						convert => { "icmp_unreachport_protocol_id" => "integer" }
						convert => { "icmp_unreachport_port_number" => "integer" }		  
					}
				}
				else if [icmp_type] == "unreachprot"
				{
					mutate
					{
						rename => { "column22" => "icmp_unreachprot_destination_ip" }
						rename => { "column23" => "icmp_unreachprot_protocol_id" }
					}
				}
				else if [icmp_type] == "tstampreply"
				{
					mutate
					{
						rename => { "column22" => "icmp_tstampreply_id" }
						rename => { "column23" => "icmp_tstampreply_sequence" }
						rename => { "column24" => "icmp_tstampreply_otime" }
						rename => { "column25" => "icmp_tstampreply_rtime" }
						rename => { "column26" => "icmp_tstampreply_ttime" }
					}
				}
				else if [icmp_type] == "tstamp"
				{
					mutate
					{
						rename => { "column22" => "icmp_tstamp_id" }
						rename => { "column23" => "icmp_tstamp_sequence" }
					}
				}
				else if [icmp_type] == "needfrag"
				{
					mutate
					{
						# @@TODO: The pfsense wiki doc is incorrect
						rename => { "column22" => "icmp_needfrag_description_ip" }
					}
				}
				else if [icmp_type] == "source quench8"
				{
				}
				else
				# else if [icmp_type] == "unreach" or [icmp_type] == "timexceed" or [icmp_type] == "redirect"
				{
					mutate
					{
						rename => { "column22" => "icmp_description" }
					}
				}

			}
			else if [protocol_id] == 112
			{  # CARP
			}
		}

		# IPV6 Fields
		# 0x00,0xd541e,255,UDP,17,
		# @@TODO: The rest of this needs to be implemented
		if [ip_version] == 6
		{
			mutate
			{
				rename => { "column10" => "class" }
				rename => { "column11" => "flow_label" }
				rename => { "column12" => "hop_limit" }
				rename => { "column13" => "protocol" }
				rename => { "column14" => "protocol_id" }

				convert => { "hop_limit" => "integer" }
				convert => { "protocol_id" => "integer" }

				# IPV4 AND IPV6 common fields
				# 53,fe80::a00:27ff:fe2f:3f6d,ff02::fb,
				rename => { "column15" => "length" }
				rename => { "column16" => "source_ip" }
				rename => { "column17" => "destination_ip" }

				convert => { "length" => "integer" }
			}
			if [protocol_id] == 6
			{  # TCP
				mutate
				{
					rename => { "column18" => "source_port" }
					rename => { "column19" => "destination_port" }
					rename => { "column20" => "data_length" }
					rename => { "column21" => "tcp_flags" }
					rename => { "column22" => "sequence_number" }
					rename => { "column23" => "ack" }
					rename => { "column24" => "window" }
					rename => { "column25" => "urg" }
					rename => { "column26" => "options" }
					convert => { "data_length" => "integer" }
					convert => { "source_port" => "integer" }
					convert => { "destination_port" => "integer" }
					convert => { "sequence_number" => "integer" }
				}
			}
			else if [protocol_id] == 17
			{  # UDP
				mutate
				{
					rename => { "column18" => "source_port" }
					rename => { "column19" => "destination_port" }
					rename => { "column20" => "data_length" }

					convert => { "data_length" => "integer" }
					convert => { "source_port" => "integer" }
					convert => { "destination_port" => "integer" }
				}
			}
			else if [protocol_id] == 1
			{  # ICMP

			}
			else if [protocol_id] == 112
			{  # CARP
			}
		}

		#  Remove the original message
		mutate
		{
			remove_field => [ "message" ]
		}
		# @@TODO: Not sure if this is correct.
		# @@TODO: Require instructions on how to setup up the
		#     mapping for this in elasticsearch
		geoip 
		{
			source => "source_ip"
			target => "geoip"
			add_field => [ "[geoip][coordinates]", "%{[geoip][location]}" ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][city\_name]}"  ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][continent\_code]}" ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][country\_code2]}"  ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][country\_code3]}"  ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][country\_name]}" ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][dma\_code]}"  ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][postal\_code]}"  ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][region\_name]}"  ]
		}
	}
}

output {
	if "PFSENSE" in [tags] { 
        elasticsearch {
            index => "pfsense-firewall-%{+YYY.MM.dd}"
            #  To use with elastic-composer change the user and password
            #user => <elastic username>
            #password => "<elastic password>"
            #hosts => ["https://es01:9200","https://es02:9200","https://es03:9200"]
            #ssl => true
            #cacert => "/usr/share/elasticsearch/config/certificates/ca/ca.crt"
        }
    }

	# stdout
	# {
	#   codec => rubydebug 
	# }
}